package main

import (
	"log"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/joho/godotenv"
	"github.com/romangergovskiy/go-pvz/internal/auth"
	"github.com/romangergovskiy/go-pvz/internal/database"
	"github.com/romangergovskiy/go-pvz/internal/pvz"
)

func main() {
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	} else {
		log.Println("‚úÖ .env —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
	}

	db, err := database.InitDB()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer db.Close()

	router := mux.NewRouter()

	router.HandleFunc("/register", auth.RegisterUser(db)).Methods("POST")
	router.HandleFunc("/login", auth.LoginUser(db)).Methods("POST")

	secured := router.PathPrefix("/secured").Subrouter()
	secured.Use(auth.VerifyToken)

	secured.HandleFunc("/pvz", pvz.CreatePVZ(db)).Methods("POST")
	secured.HandleFunc("/pvz/{id}", pvz.GetPVZ(db)).Methods("GET")

	log.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", router))
}
